use cgmath::Matrix4;

const GAL2FK5J2000: &'static Matrix4<f64> = &Matrix4::new(
    -0.44482962996001117814661406161609,
    0.74698224449721889052738800455594,
    0.49410942787558367352522237135824,
    0.0,
    -0.19807637343120152818048609141212,
    0.45598377617506692227210047834778,
    -0.86766614901900470118161653456955,
    0.0,
    -0.87343709023488504876038316840868,
    -0.48383501554871322683177417511638,
    -0.05487556041621536849239890045391,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0,
);

const FK5J20002GAL: &'static Matrix4<f64> = &Matrix4::new(
    -0.44482962996001117814661406161609,
    -0.19807637343120152818048609141212,
    -0.87343709023488504876038316840868,
    0.0,
    0.74698224449721889052738800455594,
    0.45598377617506692227210047834778,
    -0.48383501554871322683177417511638,
    0.0,
    0.49410942787558367352522237135824,
    -0.86766614901900470118161653456955,
    -0.05487556041621536849239890045391,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0,
);

const ID: &'static Matrix4<f64> = &Matrix4::new(
    1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0,
);


use serde::Deserialize;
use wasm_bindgen::prelude::*;
#[wasm_bindgen]
#[derive(Clone, Copy, PartialEq, Eq, Debug, Deserialize, Hash)]
pub enum CooSystem {
    FK5J2000,
    GAL,
}

pub const NUM_COOSYSTEM: usize = 2;

impl CooSystem {
    #[inline]
    pub fn to(&self, coo_system: Self) -> &Matrix4<f64> {
        match (self, coo_system) {
            (CooSystem::GAL, CooSystem::FK5J2000) => GAL2FK5J2000,
            (CooSystem::FK5J2000, CooSystem::GAL) => FK5J20002GAL,
            (_, _) => ID,
        }
    }
}
